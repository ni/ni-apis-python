name: Check codegen up to date

on:
  workflow_call:
    inputs:
      package-name:
        description: 'The name of the package folder to check.'
        default: ''
        required: true
        type: string
      proto-basepath:
        description: 'The base path to the proto files used for generation, relative to the repo root.'
        default: 'third_party/ni-apis'
        type: string
      proto-subpath:
        description: 'The specific subpath to the proto files needed for generation, relative to the proto-basepath.'
        default: ''
        required: true
        type: string
      proto-include-path:
        description: 'Additional path to include during proto generation, relative to the repo root.'
        default: 'third_party/ni-apis'
        type: string
      output-basepath:
        description: 'The base output path for the generated files, relative to the repo root.'
        default: ''
        required: true
        type: string
      output-format:
        description: 'The format for the generated stubs. Options are submodule and subpackage.'
        default: ''
        required: true
        type: string

jobs:
  check_codegen:
    name: Check codegen up to date for ${{ inputs.package-name }}
    runs-on: ubuntu-latest
    defaults:
      run:
        # Set the working-directory for all steps in this job.
        working-directory: ${{ github.workspace }}/tools/grpc_generator
    steps:
      - name: Validate package name
        if: ${{ !endsWith(inputs.package-name, '.proto') && inputs.package-name != 'ni.protobuf.types' }}
        run: echo "::error title=Package Name Error::Invalid package name ${{ inputs.package-name }}. The package name must end in '.proto'."
      - name: Check out repo
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          submodules: true
      - name: Set up Python
        uses: ni/python-actions/setup-python@f0276f7f58868ec0d0d1a86377287c9e6fe0c6e7 # v0.5.0
        id: setup-python
      - name: Set up Poetry
        uses: ni/python-actions/setup-poetry@f0276f7f58868ec0d0d1a86377287c9e6fe0c6e7 # v0.5.0
      - name: Check for lock changes
        run: poetry check --lock
      - name: Cache virtualenv
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: ${{ github.workspace }}/tools/grpc_generator/.venv
          key: grpc_generator-only-main-${{ runner.os }}-py${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('tools/grpc_generator/poetry.lock') }}
      - name: Install grpc_generator
        run: poetry install -v --only main
      - name: Generate gRPC stubs
        run: |
          poetry run grpc-generator \
            --proto-basepath ${{ github.workspace }}/${{ inputs.proto-basepath }} \
            --proto-subpath ${{ inputs.proto-subpath }} \
            --proto-include-path ${{ github.workspace }}/${{ inputs.proto-include-path }} \
            --output-basepath ${{ github.workspace }}/${{ inputs.output-basepath }} \
            --output-format ${{ inputs.output-format }}
      - name: Check for out-of-date gRPC stubs
        run: |
          git add ${{ github.workspace }}/${{ inputs.output-basepath }}
          git diff --exit-code --staged ${{ github.workspace }}/${{ inputs.output-basepath }}
          git diff --exit-code ${{ github.workspace }}/${{ inputs.output-basepath }}
