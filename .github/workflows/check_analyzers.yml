name: Check analyzers

on:
  workflow_call:
    inputs:
      package-name:
        description: 'The name of the package to check.'
        default: ''
        required: true
        type: string
      package-base-path:
        description: 'The parent directory of the package to check. Defaults to packages.'
        default: 'packages'
        required: false
        type: string
      install-drivers:
        description: 'Whether to install drivers extras'
        default: false
        required: false
        type: boolean

jobs:
  check_analyzers:
    name: Check analyzers for ${{ inputs.package-name }}
    runs-on: ubuntu-latest
    defaults:
      run:
        # Set the working-directory for all steps in this job.
        working-directory: ./${{ inputs.package-base-path }}/${{ inputs.package-name }}
    steps:
      - name: Check out repo
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          submodules: true
      - name: Set up Python
        uses: ni/python-actions/setup-python@f0276f7f58868ec0d0d1a86377287c9e6fe0c6e7 # v0.5.0
        id: setup-python
      - name: Set up Poetry
        uses: ni/python-actions/setup-poetry@f0276f7f58868ec0d0d1a86377287c9e6fe0c6e7 # v0.5.0
      - name: Check for lock changes
        run: poetry check --lock
      - name: Cache virtualenv
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: ${{ inputs.package-base-path }}/${{ inputs.package-name }}/.venv
          key: ${{ inputs.package-name }}-${{ runner.os }}-py${{ steps.setup-python.outputs.python-version }}-${{ hashFiles(format('{0}/{1}/poetry.lock', inputs.package-base-path, inputs.package-name)) }}
      - name: Install ${{ inputs.package-name }}
        run: |
          if [ "${{ inputs.install-drivers }}" = "true" ]; then
            poetry install -v --extras drivers
          else
            poetry install -v
          fi
      - name: Lint
        run: poetry run ni-python-styleguide lint
      - name: Mypy static analysis (Linux)
        run:  poetry run mypy
      - name: Mypy static analysis (Windows)
        run:  poetry run mypy --platform win32
      - name: Bandit security checks
        run:  poetry run bandit -c pyproject.toml -r src/
      - name: Add virtualenv to the path for pyright-action
        run: echo "$(poetry env info --path)/bin" >> $GITHUB_PATH
      - name: Pyright static analysis (Linux)
        uses: jakebailey/pyright-action@6cabc0f01c4994be48fd45cd9dbacdd6e1ee6e5e # v2.3.3
        with:
          python-platform: Linux
          version: PATH
          working-directory: ./${{ inputs.package-base-path }}/${{ inputs.package-name }}
      - name: Pyright static analysis (Windows)
        uses: jakebailey/pyright-action@6cabc0f01c4994be48fd45cd9dbacdd6e1ee6e5e # v2.3.3
        with:
          python-platform: Windows
          version: PATH
          working-directory: ./${{ inputs.package-base-path }}/${{ inputs.package-name }}
