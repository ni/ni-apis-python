name: Create draft release

on:
  workflow_dispatch:
    inputs:
      package-name:
        description: 'Package to create release for'
        required: true
        type: choice
        default: 'ni-grpc-extensions'
        options:
          - ni.protobuf.types
          - ni-grpc-extensions
  push:
    branches:
      - 'users/jdixon/*'

jobs:
  draft_release:
    name: Draft release for ${{ inputs.package-name }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for git tag and release notes
          
      - name: Extract version from pyproject.toml
        id: get-version
        working-directory: packages/${{ inputs.package-name }}
        run: |
          project_version="$(poetry version --short)"
          echo "version=$project_version" >> $GITHUB_OUTPUT
          echo "tag=${{ inputs.package-name }}/$project_version" >> $GITHUB_OUTPUT
          echo "title=${{ inputs.package-name }} $project_version" >> $GITHUB_OUTPUT
          echo "Found version: $project_version"
        shell: bash

      - name: Find previous tag
        id: previous-tag
        run: |
          PACKAGE="${{ inputs.package-name }}"
          # Find all tags for this package, sort by version, get the latest
          PREVIOUS_TAG=$(git tag -l "${PACKAGE}/*" | sort -V | tail -1)
          if [[ -n "$PREVIOUS_TAG" ]]; then
            echo "previous-tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
            echo "Found previous tag: $PREVIOUS_TAG"
          else
            echo "previous-tag=" >> $GITHUB_OUTPUT
            echo "No previous tag found for package $PACKAGE"
          fi
          
      - name: Generate release notes
        id: release-notes
        run: |
          PACKAGE="${{ inputs.package-name }}"
          CURRENT_TAG="${{ steps.get-version.outputs.tag }}"
          PREVIOUS_TAG="${{ steps.previous-tag.outputs.previous-tag }}"
          
          if [[ -n "$PREVIOUS_TAG" ]]; then
            echo "Generating release notes between $PREVIOUS_TAG and HEAD"
            NOTES=$(git log --pretty=format:"- %s" "$PREVIOUS_TAG..HEAD" --no-merges -- "packages/$PACKAGE/")
            if [[ -z "$NOTES" ]]; then
              NOTES="No changes found in packages/$PACKAGE/ since $PREVIOUS_TAG"
            fi
          else
            echo "Generating release notes from beginning of history"
            NOTES=$(git log --pretty=format:"- %s" --no-merges -- "packages/$PACKAGE/")
            if [[ -z "$NOTES" ]]; then
              NOTES="Initial release of $PACKAGE"
            fi
          fi
          
          # Create multiline output
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "# Changes" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Create draft release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.get-version.outputs.tag }}
          name: ${{ steps.get-version.outputs.title }}
          body: ${{ steps.release-notes.outputs.notes }}
          draft: true
          commit: ${{ github.sha }}
          token: ${{ github.token }}