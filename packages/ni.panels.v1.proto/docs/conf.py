"""Sphinx Configuration File."""

import datetime
import pathlib

import autoapi.extension
import toml
from m2r2 import convert

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    "autoapi.extension",
    "m2r2",
    "sphinx.ext.autodoc",
    "sphinx.ext.intersphinx",
    "sphinx.ext.napoleon",
    "sphinx.ext.viewcode",
]

root_path = pathlib.Path(__file__).parent.parent
pyproj_file = root_path / "pyproject.toml"
proj_config = toml.loads(pyproj_file.read_text())


project = proj_config["project"]["name"]
company = "National Instruments"
copyright = f"2025-%Y, {company}"
if datetime.datetime.now().year == 2025:
    copyright = f"%Y, {company}"


# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
version = proj_config["project"]["version"]
release = ".".join(version.split(".")[:2])
description = proj_config["project"]["description"]


htmlhelp_basename = f"{project}doc"


# tell autoapi to doc the public options
autoapi_options = list(autoapi.extension._DEFAULT_OPTIONS)
autoapi_options.remove("private-members")  # note: remove this to include "_" members in docs
autoapi_dirs = [root_path / "src" / "ni"]
autoapi_python_use_implicit_namespaces = True
autoapi_template_dir = "templates/autoapi"
autoapi_python_class_content = "both"
autoapi_type = "python"
autodoc_typehints = "description"
autoapi_file_patterns = ["*.pyi", "*.py"]


def skip_aliases(app, what, name, obj, skip, options):
    """Skip aliases as needed."""
    if "conversion._" in name:
        # Skip documentation for internal methods in conversion modules.
        return True
    elif "_conversion." in name and what == "class":
        # Skip classes that are imported into _conversion.py files.
        return True

    return False


def process_docstring(app, what, name, obj, options, lines):
    """Make edits to docstrings as necessary"""
    if r"@generated by mypy-protobuf" in lines[0]:
        lines.clear()
        return

    # If a class doesn't have a docstring, it inherits the docstring
    # from the base message class. Detect that string and replace it
    # with something a little more meaningful.
    base_summary = "Abstract base class for protocol messages."
    if base_summary in lines[0]:
        lines[0] = lines[0].replace(base_summary, f"A {name} message.")
        return

    # Sphinx/autoapi have problems with nested lists that use hyphens and
    # aren't correctly indented. Convert all docstrings with a list into
    # RST using m2r2.
    if any([line for line in lines if line.startswith("-")]):
        content = "\n".join(lines)
        rst_content = convert(content)
        lines.clear()
        lines.append(rst_content)


def setup(sphinx):
    """Sphinx setup callback."""
    sphinx.connect("autoapi-skip-member", skip_aliases)
    sphinx.connect("autodoc-process-docstring", process_docstring)


# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = ["_build", "Thumbs.db", ".DS_Store"]


intersphinx_mapping = {
    "hightime": ("https://hightime.readthedocs.io/en/latest/", None),
    "nitypes": ("https://nitypes.readthedocs.io/en/latest/", None),
    "numpy": ("https://numpy.org/doc/stable/", None),
    "python": ("https://docs.python.org/3", None),
}


# -- Options for HTML output ----------------------------------------------


# The theme to use for HTML and HTML Help pages. See the documentation for
# a list of builtin themes.
#
html_theme = "sphinx_rtd_theme"
html_theme_options = {
    "navigation_depth": -1,
}

templates_path = ["templates"]

# Napoleon settings
napoleon_numpy_docstring = False
