"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import ni.measurements.data.v1.data_store_service_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class DataStoreServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    EvaluateDataQuery: grpc.UnaryUnaryMultiCallable[
        ni.measurements.data.v1.data_store_service_pb2.EvaluateDataQueryRequest,
        ni.measurements.data.v1.data_store_service_pb2.EvaluateDataQueryResponse,
    ]

    ProvideEvaluationFeedback: grpc.UnaryUnaryMultiCallable[
        ni.measurements.data.v1.data_store_service_pb2.ProvideEvaluationFeedbackRequest,
        ni.measurements.data.v1.data_store_service_pb2.ProvideEvaluationFeedbackResponse,
    ]

    EnumerateData: grpc.UnaryUnaryMultiCallable[
        ni.measurements.data.v1.data_store_service_pb2.EnumerateDataRequest,
        ni.measurements.data.v1.data_store_service_pb2.EnumerateDataResponse,
    ]

    QueryConditionSets: grpc.UnaryUnaryMultiCallable[
        ni.measurements.data.v1.data_store_service_pb2.QueryConditionSetsRequest,
        ni.measurements.data.v1.data_store_service_pb2.QueryConditionSetsResponse,
    ]

    QueryData: grpc.UnaryUnaryMultiCallable[
        ni.measurements.data.v1.data_store_service_pb2.QueryDataRequest,
        ni.measurements.data.v1.data_store_service_pb2.QueryDataResponse,
    ]

    PublishConditionSet: grpc.UnaryUnaryMultiCallable[
        ni.measurements.data.v1.data_store_service_pb2.PublishConditionSetRequest,
        ni.measurements.data.v1.data_store_service_pb2.PublishConditionSetResponse,
    ]

    PublishConditionSetBatch: grpc.UnaryUnaryMultiCallable[
        ni.measurements.data.v1.data_store_service_pb2.PublishConditionSetBatchRequest,
        ni.measurements.data.v1.data_store_service_pb2.PublishConditionSetBatchResponse,
    ]

    PublishData: grpc.UnaryUnaryMultiCallable[
        ni.measurements.data.v1.data_store_service_pb2.PublishDataRequest,
        ni.measurements.data.v1.data_store_service_pb2.PublishDataResponse,
    ]

    PublishDataBatch: grpc.UnaryUnaryMultiCallable[
        ni.measurements.data.v1.data_store_service_pb2.PublishDataBatchRequest,
        ni.measurements.data.v1.data_store_service_pb2.PublishDataBatchResponse,
    ]

    CreateSession: grpc.UnaryUnaryMultiCallable[
        ni.measurements.data.v1.data_store_service_pb2.CreateSessionRequest,
        ni.measurements.data.v1.data_store_service_pb2.CreateSessionResponse,
    ]

    GetSession: grpc.UnaryUnaryMultiCallable[
        ni.measurements.data.v1.data_store_service_pb2.GetSessionRequest,
        ni.measurements.data.v1.data_store_service_pb2.GetSessionResponse,
    ]

    GetMeasurement: grpc.UnaryUnaryMultiCallable[
        ni.measurements.data.v1.data_store_service_pb2.GetMeasurementRequest,
        ni.measurements.data.v1.data_store_service_pb2.GetMeasurementResponse,
    ]
    """Gets the measurement associated with the identifier given in the request."""

    QueryMeasurements: grpc.UnaryUnaryMultiCallable[
        ni.measurements.data.v1.data_store_service_pb2.QueryMeasurementsRequest,
        ni.measurements.data.v1.data_store_service_pb2.QueryMeasurementsResponse,
    ]
    """Perform an OData query"""

    CreateMeasurement: grpc.UnaryUnaryMultiCallable[
        ni.measurements.data.v1.data_store_service_pb2.CreateMeasurementRequest,
        ni.measurements.data.v1.data_store_service_pb2.CreateMeasurementResponse,
    ]
    """Creates a new measurement in the metadata store."""

class DataStoreServiceAsyncStub:
    EvaluateDataQuery: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.data.v1.data_store_service_pb2.EvaluateDataQueryRequest,
        ni.measurements.data.v1.data_store_service_pb2.EvaluateDataQueryResponse,
    ]

    ProvideEvaluationFeedback: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.data.v1.data_store_service_pb2.ProvideEvaluationFeedbackRequest,
        ni.measurements.data.v1.data_store_service_pb2.ProvideEvaluationFeedbackResponse,
    ]

    EnumerateData: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.data.v1.data_store_service_pb2.EnumerateDataRequest,
        ni.measurements.data.v1.data_store_service_pb2.EnumerateDataResponse,
    ]

    QueryConditionSets: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.data.v1.data_store_service_pb2.QueryConditionSetsRequest,
        ni.measurements.data.v1.data_store_service_pb2.QueryConditionSetsResponse,
    ]

    QueryData: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.data.v1.data_store_service_pb2.QueryDataRequest,
        ni.measurements.data.v1.data_store_service_pb2.QueryDataResponse,
    ]

    PublishConditionSet: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.data.v1.data_store_service_pb2.PublishConditionSetRequest,
        ni.measurements.data.v1.data_store_service_pb2.PublishConditionSetResponse,
    ]

    PublishConditionSetBatch: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.data.v1.data_store_service_pb2.PublishConditionSetBatchRequest,
        ni.measurements.data.v1.data_store_service_pb2.PublishConditionSetBatchResponse,
    ]

    PublishData: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.data.v1.data_store_service_pb2.PublishDataRequest,
        ni.measurements.data.v1.data_store_service_pb2.PublishDataResponse,
    ]

    PublishDataBatch: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.data.v1.data_store_service_pb2.PublishDataBatchRequest,
        ni.measurements.data.v1.data_store_service_pb2.PublishDataBatchResponse,
    ]

    CreateSession: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.data.v1.data_store_service_pb2.CreateSessionRequest,
        ni.measurements.data.v1.data_store_service_pb2.CreateSessionResponse,
    ]

    GetSession: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.data.v1.data_store_service_pb2.GetSessionRequest,
        ni.measurements.data.v1.data_store_service_pb2.GetSessionResponse,
    ]

    GetMeasurement: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.data.v1.data_store_service_pb2.GetMeasurementRequest,
        ni.measurements.data.v1.data_store_service_pb2.GetMeasurementResponse,
    ]
    """Gets the measurement associated with the identifier given in the request."""

    QueryMeasurements: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.data.v1.data_store_service_pb2.QueryMeasurementsRequest,
        ni.measurements.data.v1.data_store_service_pb2.QueryMeasurementsResponse,
    ]
    """Perform an OData query"""

    CreateMeasurement: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.data.v1.data_store_service_pb2.CreateMeasurementRequest,
        ni.measurements.data.v1.data_store_service_pb2.CreateMeasurementResponse,
    ]
    """Creates a new measurement in the metadata store."""

class DataStoreServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def EvaluateDataQuery(
        self,
        request: ni.measurements.data.v1.data_store_service_pb2.EvaluateDataQueryRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.data.v1.data_store_service_pb2.EvaluateDataQueryResponse, collections.abc.Awaitable[ni.measurements.data.v1.data_store_service_pb2.EvaluateDataQueryResponse]]: ...

    @abc.abstractmethod
    def ProvideEvaluationFeedback(
        self,
        request: ni.measurements.data.v1.data_store_service_pb2.ProvideEvaluationFeedbackRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.data.v1.data_store_service_pb2.ProvideEvaluationFeedbackResponse, collections.abc.Awaitable[ni.measurements.data.v1.data_store_service_pb2.ProvideEvaluationFeedbackResponse]]: ...

    @abc.abstractmethod
    def EnumerateData(
        self,
        request: ni.measurements.data.v1.data_store_service_pb2.EnumerateDataRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.data.v1.data_store_service_pb2.EnumerateDataResponse, collections.abc.Awaitable[ni.measurements.data.v1.data_store_service_pb2.EnumerateDataResponse]]: ...

    @abc.abstractmethod
    def QueryConditionSets(
        self,
        request: ni.measurements.data.v1.data_store_service_pb2.QueryConditionSetsRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.data.v1.data_store_service_pb2.QueryConditionSetsResponse, collections.abc.Awaitable[ni.measurements.data.v1.data_store_service_pb2.QueryConditionSetsResponse]]: ...

    @abc.abstractmethod
    def QueryData(
        self,
        request: ni.measurements.data.v1.data_store_service_pb2.QueryDataRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.data.v1.data_store_service_pb2.QueryDataResponse, collections.abc.Awaitable[ni.measurements.data.v1.data_store_service_pb2.QueryDataResponse]]: ...

    @abc.abstractmethod
    def PublishConditionSet(
        self,
        request: ni.measurements.data.v1.data_store_service_pb2.PublishConditionSetRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.data.v1.data_store_service_pb2.PublishConditionSetResponse, collections.abc.Awaitable[ni.measurements.data.v1.data_store_service_pb2.PublishConditionSetResponse]]: ...

    @abc.abstractmethod
    def PublishConditionSetBatch(
        self,
        request: ni.measurements.data.v1.data_store_service_pb2.PublishConditionSetBatchRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.data.v1.data_store_service_pb2.PublishConditionSetBatchResponse, collections.abc.Awaitable[ni.measurements.data.v1.data_store_service_pb2.PublishConditionSetBatchResponse]]: ...

    @abc.abstractmethod
    def PublishData(
        self,
        request: ni.measurements.data.v1.data_store_service_pb2.PublishDataRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.data.v1.data_store_service_pb2.PublishDataResponse, collections.abc.Awaitable[ni.measurements.data.v1.data_store_service_pb2.PublishDataResponse]]: ...

    @abc.abstractmethod
    def PublishDataBatch(
        self,
        request: ni.measurements.data.v1.data_store_service_pb2.PublishDataBatchRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.data.v1.data_store_service_pb2.PublishDataBatchResponse, collections.abc.Awaitable[ni.measurements.data.v1.data_store_service_pb2.PublishDataBatchResponse]]: ...

    @abc.abstractmethod
    def CreateSession(
        self,
        request: ni.measurements.data.v1.data_store_service_pb2.CreateSessionRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.data.v1.data_store_service_pb2.CreateSessionResponse, collections.abc.Awaitable[ni.measurements.data.v1.data_store_service_pb2.CreateSessionResponse]]: ...

    @abc.abstractmethod
    def GetSession(
        self,
        request: ni.measurements.data.v1.data_store_service_pb2.GetSessionRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.data.v1.data_store_service_pb2.GetSessionResponse, collections.abc.Awaitable[ni.measurements.data.v1.data_store_service_pb2.GetSessionResponse]]: ...

    @abc.abstractmethod
    def GetMeasurement(
        self,
        request: ni.measurements.data.v1.data_store_service_pb2.GetMeasurementRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.data.v1.data_store_service_pb2.GetMeasurementResponse, collections.abc.Awaitable[ni.measurements.data.v1.data_store_service_pb2.GetMeasurementResponse]]:
        """Gets the measurement associated with the identifier given in the request."""

    @abc.abstractmethod
    def QueryMeasurements(
        self,
        request: ni.measurements.data.v1.data_store_service_pb2.QueryMeasurementsRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.data.v1.data_store_service_pb2.QueryMeasurementsResponse, collections.abc.Awaitable[ni.measurements.data.v1.data_store_service_pb2.QueryMeasurementsResponse]]:
        """Perform an OData query"""

    @abc.abstractmethod
    def CreateMeasurement(
        self,
        request: ni.measurements.data.v1.data_store_service_pb2.CreateMeasurementRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.data.v1.data_store_service_pb2.CreateMeasurementResponse, collections.abc.Awaitable[ni.measurements.data.v1.data_store_service_pb2.CreateMeasurementResponse]]:
        """Creates a new measurement in the metadata store."""

def add_DataStoreServiceServicer_to_server(servicer: DataStoreServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
